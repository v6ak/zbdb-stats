import scala.sys.process._
import java.io.IOException

val appVersion= "1.0"

lazy val scalaV = "2.13.12"

val jqueryName: String = "jquery/2.1.4/jquery.js"

val jqPlot = "org.webjars" % "jqplot" % "1.0.8r1250"

val bootstrap = "org.webjars" % "bootstrap" % "3.3.7-1"

import com.typesafe.sbt.web.PathMapping
import com.typesafe.sbt.web.pipeline.Pipeline

val removeLibs = taskKey[Pipeline.Stage]("Removes libraries")

val moveLibs = taskKey[Pipeline.Stage]("Moves libraries")

val removeUnversionedAssets = taskKey[Pipeline.Stage]("Removes unversioned assets")

val explicitlyExcludedLibFiles = Set(
  "lib/bootstrap/fonts/glyphicons-halflings-regular.eot", "lib/bootstrap/fonts/glyphicons-halflings-regular.svg",
  "lib/bootstrap/fonts/glyphicons-halflings-regular.ttf", "lib/bootstrap/fonts/glyphicons-halflings-regular.woff2"
)

val genHtmlDir =  settingKey[File]("Output directory for HTML generated files")

val PublicDirName = "statistiky" // TODO: DRY this constant from routes

val YearDir = "^[0-9]+(?:$|/.*)".r

def write(file: File, content: String) = {
  println(s"Writing $file…")
  IO.write(file, content)
  file
}

def download(out: File, source: URL) = {
  if(out.exists) {
    println(s"Source $source is already downloaded at $out.")
  } else {
    val tmpFile = file(out + ".tmp")
    println(s"Downloading $source…")
    tmpFile.getParentFile.mkdirs()
    source #> tmpFile !;
    if(! tmpFile.renameTo(out)) {
      throw new IOException(s"Renaming $tmpFile to $out failed!")
    }
    println(s"Downloaded $source as $out")
  }
  out
}

// Generates other assets than client JS, plus contains a server for development purposes
lazy val server = (project in file("server")).settings(
  version := appVersion,
  name := "zbdb-stats-server",
  scalaVersion := scalaV,
  scalaJSProjects := Seq(client),
  scalaJSStage := FullOptStage,
  Assets / pipelineStages := Seq(scalaJSPipeline),
  pipelineStages := Seq(concat, removeLibs, filter, digest, simpleUrlUpdate/*, digest*/, removeUnversionedAssets, gzip, moveLibs),
  digest / includeFilter := "*",
  digest / excludeFilter := "*.html" || "*.csv" || "*.json" || "*.json.new" ||
    // When sbt-simple-url-update updates path for glyphicons-halflings-regular.woff, it garbles the path for glyphicons-halflings-regular.woff2.
    "glyphicons-halflings-regular.woff",
  filter / excludeFilter := "*.less" || "*.note" || "*.source" || "*.css" - "main.min.css" || "*.js" - "main.min.js",
  filter / includeFilter := "*.css" || "*.html" || "*.js" || "*.csv" || "*.svg" || "*.woff" || "*.ttf" || "*.eot" || "*.woff2" || "*.json.new",
  genHtmlDir := target.value / "web" / "html" / "main",
  Assets / resourceDirectories += genHtmlDir.value,
  Assets / resourceGenerators += Def.task {
    val yearHtmlFiles = for(year <- PageGenerator.Years) yield {
      write(
        file = genHtmlDir.value / s"${year.year}" / PublicDirName / s"index.html",
        content = PageGenerator.forYear(year, PublicDirName)
      )
    }
    val allYearsListJsonFile = write(genHtmlDir.value / "years.json.new", PageGenerator.allYearsJsonString)
    yearHtmlFiles :+ allYearsListJsonFile
  }.taskValue,
  Assets / resourceGenerators += Def.task {
    for(year <- PageGenerator.Years if year.dataSource.csvDownloadUrl startsWith "https://") yield {
      download(
        out = genHtmlDir.value / s"${year.year}" / PublicDirName / s"${year.year}.csv",
        source = url(year.dataSource.csvDownloadUrl)
      )
    }
  }.taskValue,
  removeUnversionedAssets := { mappings: Seq[PathMapping] =>
    mappings.filter{case (file, name) => !(name.startsWith("main.") || explicitlyExcludedLibFiles.contains(name))}
  },
  removeLibs := { mappings: Seq[PathMapping] => // Most of libs are already included in a CSS/JS file, so skip them
    mappings.filter{case (file, name) => (!name.startsWith("lib/")) || name.startsWith("lib/bootstrap/fonts")}
  },
  moveLibs := { mappings: Seq[PathMapping] =>
    mappings.map {
      case other @ (_, YearDir()) => other
      case (file, name) => (file, PublicDirName + "/" + name)
    }
  },
  simpleUrlUpdate / includeFilter := "*.css" || "*.js" || "*.html",
  // triggers scalaJSPipeline when using compile or continuous compilation
  Compile / compile := ((Compile / compile) dependsOn scalaJSPipeline).value,
  Concat.groups := Seq(
    "main.min.js" -> group(Seq("zbdb-stats-client-jsdeps.min.js", "zbdb-stats-client-opt/main.js"))
  ),
  LessKeys.cleancss := true,
  LessKeys.compress := true,
  libraryDependencies ++= Seq(
    "com.vmunier" %% "scalajs-scripts" % "1.2.0",
    guice,
    bootstrap,
    jqPlot,
    specs2 % Test
  ),
).enablePlugins(PlayScala, JSDependenciesPlugin, SbtWeb)//.dependsOn(sharedJvm)

def toPathMapping(f: File): PathMapping = f -> f.getName

// Generates client JS; other assets are generated by the server subproject
lazy val client = (project in file("client")).settings(
  name := "zbdb-stats-client",
  version := appVersion,
  scalaJSStage := FullOptStage,
  scalaVersion := scalaV,
  scalaJSUseMainModuleInitializer := true,
  Test / scalaJSUseMainModuleInitializer := false,
  libraryDependencies ++= Seq(
    "org.scala-js" %%% "scalajs-dom" % "2.7.0",
    "com.lihaoyi" %%% "scalatags" % "0.12.0",
    "com.nrinaudo" %%% "kantan.csv" % "0.7.0",
  ),

  // Some magic required for compatibility with running the website directly from SBT (using Play)
  Compile / fastLinkJS / jsMappings += toPathMapping((Compile / packageJSDependencies).value),
  Compile / fullLinkJS / jsMappings += toPathMapping((Compile / packageMinifiedJSDependencies).value),

  jsDependencies ++= Seq(
    bootstrap / "bootstrap.min.js",
    "org.webjars" % "momentjs" % "2.10.6" / "min/moment.min.js",
    "org.webjars" % "moment-timezone" % "0.4.0-1" / "moment-timezone-with-data-2010-2020.js" dependsOn "min/moment.min.js",
    "org.webjars" % "jquery" % "2.1.4" / jqueryName minified "jquery/2.1.4/jquery.min.js",
    ProvidedJS / "jquery.stickytableheaders.js" /*minified "jquery.stickytableheaders.min.js"*/ dependsOn jqueryName,  // Cannot use minified version as it is patched,
    jqPlot / "jquery.jqplot.min.js" dependsOn jqueryName,
    jqPlot / "jqplot.dateAxisRenderer.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.categoryAxisRenderer.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.bubbleRenderer.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.pieRenderer.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.barRenderer.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.pointLabels.min.js" dependsOn "jquery.jqplot.min.js",
    jqPlot / "jqplot.highlighter.min.js" dependsOn "jquery.jqplot.min.js",
    "org.webjars.bower" % "console-polyfill" % "0.2.2" / "console-polyfill/0.2.2/index.js"
  ),
).enablePlugins(ScalaJSPlugin, JSDependenciesPlugin, ScalaJSWeb)//.dependsOn(sharedJs)

/*lazy val shared = (crossProject.crossType(CrossType.Pure) in file("shared")).
  settings(scalaVersion := scalaV).
  jsConfigure(_ enablePlugins ScalaJSWeb)

lazy val sharedJvm = shared.jvm
lazy val sharedJs = shared.js*/


name := "zbdb-stats"

version := appVersion

